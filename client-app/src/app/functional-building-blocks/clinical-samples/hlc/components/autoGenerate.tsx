import React, { FunctionComponent, useState } from 'react';
import { EditableList, EditableListProps } from '../../../../common/listEditable';
import { Api } from '../../api';
import { Store } from 'antd/lib/form/interface';
import { InputModal } from '../../../../common/inputModal';
import { createFormInput, createFormInputNumber, createFormSelect } from '../../../../common/inputModalHelpers';
import { Constants } from '../../../../default-data/constants';
import { GenerationData, EWorkflowTag } from '../../../../types';
import { ClinicalSampleNew } from '../../../../types';
import { getColumn, getEditableColumn } from '../../../../common/columnHelpers';
import { ColumnsType } from 'antd/lib/table';

const EditableClinicalSampleList: FunctionComponent<
    EditableListProps<ClinicalSampleNew>
> = EditableList<ClinicalSampleNew>();

type FormProps = {
    isActiveInputForm: boolean;
    onCreateSuccessful: (count: number) => void;
    onCancel: () => void;
};

export const AutoGenerateInputForm: FunctionComponent<FormProps> = ({
    isActiveInputForm,
    onCreateSuccessful,
    onCancel,
}) => {
    const [errorMessage, setErrorMessage] = useState<string | null>(null);
    const [autoGeneratedSamples, setAutoGeneratedSamples] = useState<ClinicalSampleNew[]>([]);

    const onCreate = (samples: ClinicalSampleNew[]) => {
        async function saveSamples() {
            try {
                await Api.postAutoGeneratedSamplesAsync(samples);

                onCreateSuccessful(samples.length);
            } catch (error) {
                setErrorMessage(error.message);
            }
        }

        saveSamples();
    };

    const onFieldsChange = (templateRaw: Store) => {
        const template: GenerationData = templateRaw as GenerationData;

        template.idSeed = 0; // todo - wait - should we get the id seed?
        const samples: ClinicalSampleNew[] = autoGenerateSamples(template);

        setAutoGeneratedSamples(samples);
    };

    const inputs: JSX.Element[] = [
        createFormInput('Project prefix', GenerationData.nameof('prefixProject')),
        createFormInput('Project suffix', GenerationData.nameof('suffixProject')),
        createFormInput('Description', GenerationData.nameof('description')),
        createFormInputNumber('Number of entries', GenerationData.nameof('numberOfEntries')),
        createFormSelect('Workflow tags', GenerationData.nameof('workflowTag'), [
            EWorkflowTag.LibraryGeneration,
            EWorkflowTag.SamplePreparation,
            EWorkflowTag.SwathAnalysis,
        ]),
    ];

    const handleSave = (row: ClinicalSampleNew) => {
        const newData: ClinicalSampleNew[] = [...autoGeneratedSamples];
        const index = newData.findIndex((item) => row.name === item.name);
        const item = newData[index];
        newData.splice(index, 1, {
            ...item,
            ...row,
        });

        setAutoGeneratedSamples(newData);
    };

    const columns: ColumnsType<ClinicalSampleNew> = [
        getColumn('Name', ClinicalSampleNew.nameof('name')),
        getEditableColumn('Clinical sample code', ClinicalSampleNew.nameof('clinicalSampleCode'), handleSave),
        getColumn('Processing person', ClinicalSampleNew.nameof('processingPerson')),
    ];

    return (
        <>
            <InputModal
                isVisible={isActiveInputForm}
                errorMessage={errorMessage}
                inputs={inputs}
                placeholder={GenerationData.Default}
                title="New clinical samples"
                onValuesChange={onFieldsChange}
                onCreate={async (_) => {
                    onCreate(autoGeneratedSamples);
                }}
                onCancel={onCancel}
            >
                <EditableClinicalSampleList
                    entries={autoGeneratedSamples}
                    columns={columns}
                    rowKeySelector={(row) => row.name}
                />
            </InputModal>
        </>
    );
};

function autoGenerateSamples(templateData: GenerationData): ClinicalSampleNew[] {
    const { numberOfEntries, prefixProject, suffixProject } = templateData;
    const samples: ClinicalSampleNew[] = new Array<ClinicalSampleNew>(numberOfEntries);

    const projectId = Constants.projectId;
    const personId = Constants.personId;

    let index = 0;
    while (index < numberOfEntries) {
        const id = index + templateData.idSeed;

        samples[index] = {
            projectId: Constants.projectId,
            name: `${prefixProject}_${projectId}_${id}_${suffixProject}`,
            clinicalSampleCode: `${id}`, // wait: the clinical sample code - how come this is not a number? on the clinical sample this is a number!
            processingPerson: personId,
            description: templateData.description,
            workflowTag: EWorkflowTag.SamplePreparation,
            quality: 'good',
        };

        index++;
    }

    return samples;
}
